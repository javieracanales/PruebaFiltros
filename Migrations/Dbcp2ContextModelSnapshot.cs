// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PruebaFiltros.Models.CP;

#nullable disable

namespace PruebaFiltros.Migrations
{
    [DbContext(typeof(Dbcp2Context))]
    partial class Dbcp2ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PruebaFiltros.Models.CP.Acceso", b =>
                {
                    b.Property<int>("IdAcceso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAcceso"));

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.Property<int>("ZonaId")
                        .HasColumnType("int");

                    b.HasKey("IdAcceso");

                    b.HasIndex(new[] { "PersonaId" }, "IX_Accesos_PersonaId");

                    b.HasIndex(new[] { "ZonaId" }, "IX_Accesos_ZonaId");

                    b.ToTable("Accesos");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Actore", b =>
                {
                    b.Property<int>("IdActor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdActor"));

                    b.Property<string>("Clave")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Mac")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Puerto")
                        .HasColumnType("int");

                    b.Property<string>("Serial")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TipoActorId")
                        .HasColumnType("int");

                    b.Property<int>("ZonaId")
                        .HasColumnType("int");

                    b.HasKey("IdActor");

                    b.HasIndex(new[] { "TipoActorId" }, "IX_Actores_TipoActorId");

                    b.HasIndex(new[] { "ZonaId" }, "IX_Actores_ZonaId");

                    b.ToTable("Actores");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Asignacione", b =>
                {
                    b.Property<int>("IdAsignacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAsignacion"));

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaTermino")
                        .HasColumnType("datetime2");

                    b.Property<int>("HorarioId")
                        .HasColumnType("int");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.HasKey("IdAsignacion");

                    b.HasIndex(new[] { "HorarioId" }, "IX_Asignaciones_HorarioId");

                    b.HasIndex(new[] { "PersonaId" }, "IX_Asignaciones_PersonaId");

                    b.ToTable("Asignaciones");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.ControlVersione", b =>
                {
                    b.Property<int>("IdControlVersion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdControlVersion"));

                    b.Property<int>("TipoActorId")
                        .HasColumnType("int");

                    b.Property<string>("UrlDescarga")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("urlDescarga");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("IdControlVersion");

                    b.HasIndex(new[] { "TipoActorId" }, "IX_ControlVersiones_TipoActorId");

                    b.ToTable("ControlVersiones");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Dispositivo", b =>
                {
                    b.Property<int>("IdDispositivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDispositivo"));

                    b.Property<string>("DispositivoCorreo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdDispositivo");

                    b.HasIndex(new[] { "PersonaId" }, "IX_Dispositivos_PersonaId");

                    b.ToTable("Dispositivos");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Empresa", b =>
                {
                    b.Property<int>("IdEmpresa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEmpresa"));

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Oficina")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rut")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SociedadId")
                        .HasColumnType("int");

                    b.Property<int>("Telefono")
                        .HasColumnType("int");

                    b.Property<int>("TipoEmpresaId")
                        .HasColumnType("int");

                    b.HasKey("IdEmpresa");

                    b.HasIndex(new[] { "SociedadId" }, "IX_Empresas_SociedadId");

                    b.HasIndex(new[] { "TipoEmpresaId" }, "IX_Empresas_TipoEmpresaId");

                    b.ToTable("Empresas");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Errore", b =>
                {
                    b.Property<int>("IdError")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdError"));

                    b.Property<string>("ComentarioCierre")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comentarioCierre");

                    b.Property<string>("Donde")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaResolucion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fechaResolucion");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Resuelto")
                        .HasColumnType("bit");

                    b.HasKey("IdError");

                    b.HasIndex(new[] { "EmpresaId" }, "IX_Errores_EmpresaId");

                    b.ToTable("Errores");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Estacionamiento", b =>
                {
                    b.Property<int>("IdEstacionamiento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEstacionamiento"));

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("numero");

                    b.Property<int>("ZonaId")
                        .HasColumnType("int");

                    b.HasKey("IdEstacionamiento");

                    b.HasIndex(new[] { "ZonaId" }, "IX_Estacionamientos_ZonaId");

                    b.ToTable("Estacionamientos");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Faciale", b =>
                {
                    b.Property<int>("IdFacial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFacial"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.HasKey("IdFacial");

                    b.HasIndex(new[] { "PersonaId" }, "IX_Faciales_PersonaId");

                    b.ToTable("Faciales");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Historiale", b =>
                {
                    b.Property<int>("IdHistorial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdHistorial"));

                    b.Property<int>("DispositivoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("MensajeNotificacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdHistorial");

                    b.HasIndex(new[] { "DispositivoId" }, "IX_Historiales_DispositivoId");

                    b.ToTable("Historiales");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Horario", b =>
                {
                    b.Property<int>("IdHorario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdHorario"));

                    b.Property<bool>("Domingo")
                        .HasColumnType("bit");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<string>("HoraIngreso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HoraSalida")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Jueves")
                        .HasColumnType("bit");

                    b.Property<bool>("Lunes")
                        .HasColumnType("bit");

                    b.Property<bool>("Martes")
                        .HasColumnType("bit");

                    b.Property<bool>("Miercoles")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Sabado")
                        .HasColumnType("bit");

                    b.Property<bool>("Viernes")
                        .HasColumnType("bit");

                    b.HasKey("IdHorario");

                    b.HasIndex(new[] { "EmpresaId" }, "IX_Horarios_EmpresaId");

                    b.ToTable("Horarios");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Huella", b =>
                {
                    b.Property<int>("IdHuella")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdHuella"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DedoRegistrado")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.HasKey("IdHuella");

                    b.HasIndex(new[] { "PersonaId" }, "IX_Huellas_PersonaId");

                    b.ToTable("Huellas");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.ListasNegra", b =>
                {
                    b.Property<int>("IdListaNegra")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdListaNegra"));

                    b.Property<int>("CreadorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaIngreso")
                        .HasColumnType("datetime2");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.HasKey("IdListaNegra");

                    b.HasIndex(new[] { "PersonaId" }, "IX_ListasNegras_PersonaId");

                    b.ToTable("ListasNegras");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Pase", b =>
                {
                    b.Property<int>("IdPase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPase"));

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaAsignacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaTermino")
                        .HasColumnType("datetime2");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.Property<int>("TarjetaId")
                        .HasColumnType("int");

                    b.HasKey("IdPase");

                    b.HasIndex(new[] { "PersonaId" }, "IX_Pases_PersonaId");

                    b.HasIndex(new[] { "TarjetaId" }, "IX_Pases_TarjetaId");

                    b.ToTable("Pases");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Patente", b =>
                {
                    b.Property<int>("IdPatente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPatente"));

                    b.Property<string>("PatenteDigitos")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.HasKey("IdPatente");

                    b.HasIndex(new[] { "PersonaId" }, "IX_Patentes_PersonaId");

                    b.ToTable("Patentes");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Persona", b =>
                {
                    b.Property<int>("IdPersona")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPersona"));

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AppMovil")
                        .HasColumnType("bit");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rut")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Telefono")
                        .HasColumnType("int");

                    b.Property<int?>("TipoPersonaId")
                        .HasColumnType("int");

                    b.HasKey("IdPersona");

                    b.HasIndex(new[] { "TipoPersonaId" }, "IX_Personas_TipoPersonaId");

                    b.ToTable("Personas");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.PersonasEmpresa", b =>
                {
                    b.Property<int>("IdPersonaEmpresa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPersonaEmpresa"));

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.HasKey("IdPersonaEmpresa");

                    b.HasIndex(new[] { "EmpresaId" }, "IX_PersonasEmpresas_EmpresaId");

                    b.HasIndex(new[] { "PersonaId" }, "IX_PersonasEmpresas_PersonaId");

                    b.ToTable("PersonasEmpresas");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.PersonasEstacionamiento", b =>
                {
                    b.Property<int>("IdPersonaEstacionamiento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPersonaEstacionamiento"));

                    b.Property<int>("EstacionamientoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaAsignacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fechaAsignacion");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.HasKey("IdPersonaEstacionamiento");

                    b.HasIndex(new[] { "EstacionamientoId" }, "IX_PersonasEstacionamientos_EstacionamientoId");

                    b.HasIndex(new[] { "PersonaId" }, "IX_PersonasEstacionamientos_PersonaId");

                    b.ToTable("PersonasEstacionamientos");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.PersonasUbicacione", b =>
                {
                    b.Property<int>("IdPersonaUbicacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPersonaUbicacion"));

                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.Property<int>("UbicacionId")
                        .HasColumnType("int");

                    b.HasKey("IdPersonaUbicacion");

                    b.HasIndex(new[] { "PersonaId" }, "IX_PersonasUbicaciones_PersonaId");

                    b.HasIndex(new[] { "UbicacionId" }, "IX_PersonasUbicaciones_UbicacionId");

                    b.ToTable("PersonasUbicaciones");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.PinPass", b =>
                {
                    b.Property<int>("IdPinPass")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPinPass"));

                    b.Property<int>("Clave")
                        .HasColumnType("int");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.HasKey("IdPinPass");

                    b.HasIndex(new[] { "PersonaId" }, "IX_PinPasses_PersonaId");

                    b.ToTable("PinPasses");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Registro", b =>
                {
                    b.Property<int>("IdRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRegistro"));

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PatenteId")
                        .HasColumnType("int");

                    b.Property<int?>("PersonaId")
                        .HasColumnType("int");

                    b.Property<int?>("SentidoId")
                        .HasColumnType("int");

                    b.Property<int>("TipoActorId")
                        .HasColumnType("int");

                    b.Property<int?>("UbicacionId")
                        .HasColumnType("int");

                    b.Property<int>("ZonaId")
                        .HasColumnType("int");

                    b.HasKey("IdRegistro");

                    b.HasIndex(new[] { "PatenteId" }, "IX_Registros_PatenteId");

                    b.HasIndex(new[] { "PersonaId" }, "IX_Registros_PersonaId");

                    b.HasIndex(new[] { "SentidoId" }, "IX_Registros_SentidoId");

                    b.HasIndex(new[] { "TipoActorId" }, "IX_Registros_TipoActorId");

                    b.HasIndex(new[] { "UbicacionId" }, "IX_Registros_UbicacionId");

                    b.HasIndex(new[] { "ZonaId" }, "IX_Registros_ZonaId");

                    b.ToTable("Registros");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_RoleClaim_RoleId");

                    b.ToTable("RoleClaim", (string)null);
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Sentido", b =>
                {
                    b.Property<int>("IdSentido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSentido"));

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("IdSentido");

                    b.ToTable("Sentidos");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Sociedade", b =>
                {
                    b.Property<int>("IdSociedad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSociedad"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("IdSociedad");

                    b.ToTable("Sociedades");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Tarjeta", b =>
                {
                    b.Property<int>("IdTarjeta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTarjeta"));

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<int>("TipoTarjetaId")
                        .HasColumnType("int");

                    b.HasKey("IdTarjeta");

                    b.HasIndex(new[] { "TipoTarjetaId" }, "IX_Tarjetas_TipoTarjetaId");

                    b.ToTable("Tarjetas");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.TiposActore", b =>
                {
                    b.Property<int>("IdTipoActor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoActor"));

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdTipoActor");

                    b.ToTable("TiposActores");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.TiposEmpresa", b =>
                {
                    b.Property<int>("IdTipoEmpresa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoEmpresa"));

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdTipoEmpresa");

                    b.ToTable("TiposEmpresas");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.TiposPersona", b =>
                {
                    b.Property<int>("IdTipoPersona")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoPersona"));

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdTipoPersona");

                    b.HasIndex(new[] { "EmpresaId" }, "IX_TiposPersonas_EmpresaId");

                    b.ToTable("TiposPersonas");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.TiposTarjeta", b =>
                {
                    b.Property<int>("IdTipoTarjeta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoTarjeta"));

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdTipoTarjeta");

                    b.ToTable("TiposTarjetas");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.TiposUbicacione", b =>
                {
                    b.Property<int>("IdTipoUbicacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoUbicacion"));

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdTipoUbicacion");

                    b.HasIndex(new[] { "EmpresaId" }, "IX_TiposUbicaciones_EmpresaId");

                    b.ToTable("TiposUbicaciones");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.TiposVisita", b =>
                {
                    b.Property<int>("IdTipoVisita")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoVisita"));

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdTipoVisita");

                    b.HasIndex(new[] { "EmpresaId" }, "IX_TiposVisitas_EmpresaId");

                    b.ToTable("TiposVisitas");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Ubicacione", b =>
                {
                    b.Property<int>("IdUbicacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUbicacion"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nombre");

                    b.Property<string>("Numeracion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("numeracion");

                    b.Property<string>("Piso")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("piso");

                    b.Property<int>("TipoUbicacionId")
                        .HasColumnType("int");

                    b.Property<int>("ZonaId")
                        .HasColumnType("int");

                    b.HasKey("IdUbicacion");

                    b.HasIndex(new[] { "TipoUbicacionId" }, "IX_Ubicaciones_TipoUbicacionId");

                    b.HasIndex(new[] { "ZonaId" }, "IX_Ubicaciones_ZonaId");

                    b.ToTable("Ubicaciones");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_UserClaim_UserId");

                    b.ToTable("UserClaim", (string)null);
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_UserLogin_UserId");

                    b.ToTable("UserLogin", (string)null);
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.UserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Visita", b =>
                {
                    b.Property<int>("IdVisita")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdVisita"));

                    b.Property<int>("CreadorId")
                        .HasColumnType("int");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaVisita")
                        .HasColumnType("datetime2");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.Property<int>("TipoVisitaId")
                        .HasColumnType("int");

                    b.Property<int>("UbicacionId")
                        .HasColumnType("int");

                    b.HasKey("IdVisita");

                    b.HasIndex(new[] { "PersonaId" }, "IX_Visitas_PersonaId");

                    b.HasIndex(new[] { "TipoVisitaId" }, "IX_Visitas_TipoVisitaId");

                    b.HasIndex(new[] { "UbicacionId" }, "IX_Visitas_UbicacionId");

                    b.ToTable("Visitas");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Zona", b =>
                {
                    b.Property<int>("IdZona")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdZona"));

                    b.Property<bool>("AntiPassBack")
                        .HasColumnType("bit");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdZona");

                    b.HasIndex(new[] { "EmpresaId" }, "IX_Zonas_EmpresaId");

                    b.ToTable("Zonas");
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_UserRole_RoleId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Acceso", b =>
                {
                    b.HasOne("PruebaFiltros.Models.CP.Persona", "Persona")
                        .WithMany("Accesos")
                        .HasForeignKey("PersonaId")
                        .IsRequired();

                    b.HasOne("PruebaFiltros.Models.CP.Zona", "Zona")
                        .WithMany("Accesos")
                        .HasForeignKey("ZonaId")
                        .IsRequired();

                    b.Navigation("Persona");

                    b.Navigation("Zona");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Actore", b =>
                {
                    b.HasOne("PruebaFiltros.Models.CP.TiposActore", "TipoActor")
                        .WithMany("Actores")
                        .HasForeignKey("TipoActorId")
                        .IsRequired();

                    b.HasOne("PruebaFiltros.Models.CP.Zona", "Zona")
                        .WithMany("Actores")
                        .HasForeignKey("ZonaId")
                        .IsRequired();

                    b.Navigation("TipoActor");

                    b.Navigation("Zona");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Asignacione", b =>
                {
                    b.HasOne("PruebaFiltros.Models.CP.Horario", "Horario")
                        .WithMany("Asignaciones")
                        .HasForeignKey("HorarioId")
                        .IsRequired();

                    b.HasOne("PruebaFiltros.Models.CP.Persona", "Persona")
                        .WithMany("Asignaciones")
                        .HasForeignKey("PersonaId")
                        .IsRequired();

                    b.Navigation("Horario");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.ControlVersione", b =>
                {
                    b.HasOne("PruebaFiltros.Models.CP.TiposActore", "TipoActor")
                        .WithMany("ControlVersiones")
                        .HasForeignKey("TipoActorId")
                        .IsRequired();

                    b.Navigation("TipoActor");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Dispositivo", b =>
                {
                    b.HasOne("PruebaFiltros.Models.CP.Persona", "Persona")
                        .WithMany("Dispositivos")
                        .HasForeignKey("PersonaId")
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Empresa", b =>
                {
                    b.HasOne("PruebaFiltros.Models.CP.Sociedade", "Sociedad")
                        .WithMany("Empresas")
                        .HasForeignKey("SociedadId");

                    b.HasOne("PruebaFiltros.Models.CP.TiposEmpresa", "TipoEmpresa")
                        .WithMany("Empresas")
                        .HasForeignKey("TipoEmpresaId")
                        .IsRequired();

                    b.Navigation("Sociedad");

                    b.Navigation("TipoEmpresa");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Errore", b =>
                {
                    b.HasOne("PruebaFiltros.Models.CP.Empresa", "Empresa")
                        .WithMany("Errores")
                        .HasForeignKey("EmpresaId")
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Estacionamiento", b =>
                {
                    b.HasOne("PruebaFiltros.Models.CP.Zona", "Zona")
                        .WithMany("Estacionamientos")
                        .HasForeignKey("ZonaId")
                        .IsRequired();

                    b.Navigation("Zona");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Faciale", b =>
                {
                    b.HasOne("PruebaFiltros.Models.CP.Persona", "Persona")
                        .WithMany("Faciales")
                        .HasForeignKey("PersonaId")
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Historiale", b =>
                {
                    b.HasOne("PruebaFiltros.Models.CP.Dispositivo", "Dispositivo")
                        .WithMany("Historiales")
                        .HasForeignKey("DispositivoId")
                        .IsRequired();

                    b.Navigation("Dispositivo");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Horario", b =>
                {
                    b.HasOne("PruebaFiltros.Models.CP.Empresa", "Empresa")
                        .WithMany("Horarios")
                        .HasForeignKey("EmpresaId")
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Huella", b =>
                {
                    b.HasOne("PruebaFiltros.Models.CP.Persona", "Persona")
                        .WithMany("Huellas")
                        .HasForeignKey("PersonaId")
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.ListasNegra", b =>
                {
                    b.HasOne("PruebaFiltros.Models.CP.Persona", "Persona")
                        .WithMany("ListasNegras")
                        .HasForeignKey("PersonaId")
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Pase", b =>
                {
                    b.HasOne("PruebaFiltros.Models.CP.Persona", "Persona")
                        .WithMany("Pases")
                        .HasForeignKey("PersonaId")
                        .IsRequired();

                    b.HasOne("PruebaFiltros.Models.CP.Tarjeta", "Tarjeta")
                        .WithMany("Pases")
                        .HasForeignKey("TarjetaId")
                        .IsRequired();

                    b.Navigation("Persona");

                    b.Navigation("Tarjeta");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Patente", b =>
                {
                    b.HasOne("PruebaFiltros.Models.CP.Persona", "Persona")
                        .WithMany("Patentes")
                        .HasForeignKey("PersonaId")
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Persona", b =>
                {
                    b.HasOne("PruebaFiltros.Models.CP.TiposPersona", "TipoPersona")
                        .WithMany("Personas")
                        .HasForeignKey("TipoPersonaId");

                    b.Navigation("TipoPersona");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.PersonasEmpresa", b =>
                {
                    b.HasOne("PruebaFiltros.Models.CP.Empresa", "Empresa")
                        .WithMany("PersonasEmpresas")
                        .HasForeignKey("EmpresaId")
                        .IsRequired();

                    b.HasOne("PruebaFiltros.Models.CP.Persona", "Persona")
                        .WithMany("PersonasEmpresas")
                        .HasForeignKey("PersonaId")
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.PersonasEstacionamiento", b =>
                {
                    b.HasOne("PruebaFiltros.Models.CP.Estacionamiento", "Estacionamiento")
                        .WithMany("PersonasEstacionamientos")
                        .HasForeignKey("EstacionamientoId")
                        .IsRequired();

                    b.HasOne("PruebaFiltros.Models.CP.Persona", "Persona")
                        .WithMany("PersonasEstacionamientos")
                        .HasForeignKey("PersonaId")
                        .IsRequired();

                    b.Navigation("Estacionamiento");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.PersonasUbicacione", b =>
                {
                    b.HasOne("PruebaFiltros.Models.CP.Persona", "Persona")
                        .WithMany("PersonasUbicaciones")
                        .HasForeignKey("PersonaId")
                        .IsRequired();

                    b.HasOne("PruebaFiltros.Models.CP.Ubicacione", "Ubicacion")
                        .WithMany("PersonasUbicaciones")
                        .HasForeignKey("UbicacionId")
                        .IsRequired();

                    b.Navigation("Persona");

                    b.Navigation("Ubicacion");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.PinPass", b =>
                {
                    b.HasOne("PruebaFiltros.Models.CP.Persona", "Persona")
                        .WithMany("PinPasses")
                        .HasForeignKey("PersonaId")
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Registro", b =>
                {
                    b.HasOne("PruebaFiltros.Models.CP.Patente", "Patente")
                        .WithMany("Registros")
                        .HasForeignKey("PatenteId");

                    b.HasOne("PruebaFiltros.Models.CP.Persona", "Persona")
                        .WithMany("Registros")
                        .HasForeignKey("PersonaId");

                    b.HasOne("PruebaFiltros.Models.CP.Sentido", "Sentido")
                        .WithMany("Registros")
                        .HasForeignKey("SentidoId");

                    b.HasOne("PruebaFiltros.Models.CP.TiposActore", "TipoActor")
                        .WithMany("Registros")
                        .HasForeignKey("TipoActorId")
                        .IsRequired();

                    b.HasOne("PruebaFiltros.Models.CP.Ubicacione", "Ubicacion")
                        .WithMany("Registros")
                        .HasForeignKey("UbicacionId");

                    b.HasOne("PruebaFiltros.Models.CP.Zona", "Zona")
                        .WithMany("Registros")
                        .HasForeignKey("ZonaId")
                        .IsRequired();

                    b.Navigation("Patente");

                    b.Navigation("Persona");

                    b.Navigation("Sentido");

                    b.Navigation("TipoActor");

                    b.Navigation("Ubicacion");

                    b.Navigation("Zona");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.RoleClaim", b =>
                {
                    b.HasOne("PruebaFiltros.Models.CP.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Tarjeta", b =>
                {
                    b.HasOne("PruebaFiltros.Models.CP.TiposTarjeta", "TipoTarjeta")
                        .WithMany("Tarjeta")
                        .HasForeignKey("TipoTarjetaId")
                        .IsRequired();

                    b.Navigation("TipoTarjeta");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.TiposPersona", b =>
                {
                    b.HasOne("PruebaFiltros.Models.CP.Empresa", "Empresa")
                        .WithMany("TiposPersonas")
                        .HasForeignKey("EmpresaId")
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.TiposUbicacione", b =>
                {
                    b.HasOne("PruebaFiltros.Models.CP.Empresa", "Empresa")
                        .WithMany("TiposUbicaciones")
                        .HasForeignKey("EmpresaId")
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.TiposVisita", b =>
                {
                    b.HasOne("PruebaFiltros.Models.CP.Empresa", "Empresa")
                        .WithMany("TiposVisita")
                        .HasForeignKey("EmpresaId")
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Ubicacione", b =>
                {
                    b.HasOne("PruebaFiltros.Models.CP.TiposUbicacione", "TipoUbicacion")
                        .WithMany("Ubicaciones")
                        .HasForeignKey("TipoUbicacionId")
                        .IsRequired();

                    b.HasOne("PruebaFiltros.Models.CP.Zona", "Zona")
                        .WithMany("Ubicaciones")
                        .HasForeignKey("ZonaId")
                        .IsRequired();

                    b.Navigation("TipoUbicacion");

                    b.Navigation("Zona");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.UserClaim", b =>
                {
                    b.HasOne("PruebaFiltros.Models.CP.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.UserLogin", b =>
                {
                    b.HasOne("PruebaFiltros.Models.CP.User", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.UserToken", b =>
                {
                    b.HasOne("PruebaFiltros.Models.CP.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Visita", b =>
                {
                    b.HasOne("PruebaFiltros.Models.CP.Persona", "Persona")
                        .WithMany("Visita")
                        .HasForeignKey("PersonaId")
                        .IsRequired();

                    b.HasOne("PruebaFiltros.Models.CP.TiposVisita", "TipoVisita")
                        .WithMany("Visita")
                        .HasForeignKey("TipoVisitaId")
                        .IsRequired();

                    b.HasOne("PruebaFiltros.Models.CP.Ubicacione", "Ubicacion")
                        .WithMany("Visita")
                        .HasForeignKey("UbicacionId")
                        .IsRequired();

                    b.Navigation("Persona");

                    b.Navigation("TipoVisita");

                    b.Navigation("Ubicacion");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Zona", b =>
                {
                    b.HasOne("PruebaFiltros.Models.CP.Empresa", "Empresa")
                        .WithMany("Zonas")
                        .HasForeignKey("EmpresaId")
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.HasOne("PruebaFiltros.Models.CP.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .IsRequired();

                    b.HasOne("PruebaFiltros.Models.CP.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Dispositivo", b =>
                {
                    b.Navigation("Historiales");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Empresa", b =>
                {
                    b.Navigation("Errores");

                    b.Navigation("Horarios");

                    b.Navigation("PersonasEmpresas");

                    b.Navigation("TiposPersonas");

                    b.Navigation("TiposUbicaciones");

                    b.Navigation("TiposVisita");

                    b.Navigation("Zonas");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Estacionamiento", b =>
                {
                    b.Navigation("PersonasEstacionamientos");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Horario", b =>
                {
                    b.Navigation("Asignaciones");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Patente", b =>
                {
                    b.Navigation("Registros");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Persona", b =>
                {
                    b.Navigation("Accesos");

                    b.Navigation("Asignaciones");

                    b.Navigation("Dispositivos");

                    b.Navigation("Faciales");

                    b.Navigation("Huellas");

                    b.Navigation("ListasNegras");

                    b.Navigation("Pases");

                    b.Navigation("Patentes");

                    b.Navigation("PersonasEmpresas");

                    b.Navigation("PersonasEstacionamientos");

                    b.Navigation("PersonasUbicaciones");

                    b.Navigation("PinPasses");

                    b.Navigation("Registros");

                    b.Navigation("Visita");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Role", b =>
                {
                    b.Navigation("RoleClaims");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Sentido", b =>
                {
                    b.Navigation("Registros");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Sociedade", b =>
                {
                    b.Navigation("Empresas");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Tarjeta", b =>
                {
                    b.Navigation("Pases");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.TiposActore", b =>
                {
                    b.Navigation("Actores");

                    b.Navigation("ControlVersiones");

                    b.Navigation("Registros");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.TiposEmpresa", b =>
                {
                    b.Navigation("Empresas");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.TiposPersona", b =>
                {
                    b.Navigation("Personas");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.TiposTarjeta", b =>
                {
                    b.Navigation("Tarjeta");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.TiposUbicacione", b =>
                {
                    b.Navigation("Ubicaciones");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.TiposVisita", b =>
                {
                    b.Navigation("Visita");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Ubicacione", b =>
                {
                    b.Navigation("PersonasUbicaciones");

                    b.Navigation("Registros");

                    b.Navigation("Visita");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.User", b =>
                {
                    b.Navigation("UserClaims");

                    b.Navigation("UserLogins");

                    b.Navigation("UserTokens");
                });

            modelBuilder.Entity("PruebaFiltros.Models.CP.Zona", b =>
                {
                    b.Navigation("Accesos");

                    b.Navigation("Actores");

                    b.Navigation("Estacionamientos");

                    b.Navigation("Registros");

                    b.Navigation("Ubicaciones");
                });
#pragma warning restore 612, 618
        }
    }
}
